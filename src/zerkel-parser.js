// Generated by CoffeeScript 1.10.0
(function() {
  var MIN_GZIP_SIZE, Zerkel, emit, parser, zlib;

  parser = require('./zerkel-parser-impl') || (typeof window !== "undefined" && window !== null ? window.zerkelParserImpl : void 0);

  if (typeof window === "undefined" || window === null) {
    zlib = require('zlib');
  }

  MIN_GZIP_SIZE = Infinity;

  emit = function(ast) {
    var i, len, ref, ret, x;
    switch (Object.prototype.toString.call(ast).slice(8, -1)) {
      case 'Number':
        return JSON.stringify(ast);
      case 'String':
        return "\"" + ast + "\"";
      case 'Array':
        switch (ast[0]) {
          case 'var':
            ret = "_env." + ast[1];
            ref = ast.slice(2);
            for (i = 0, len = ref.length; i < len; i++) {
              x = ref[i];
              ret = "(" + ret + "||{})." + x;
            }
            return ret;
          case 'array':
            return "[" + (ast.slice(1).map(emit).join(',')) + "]";
          case 'not':
            return "(!" + (emit(ast[1])) + ")";
          case 'and':
            return "(" + (emit(ast[1])) + " && " + (emit(ast[2])) + ")";
          case 'or':
            return "(" + (emit(ast[1])) + " || " + (emit(ast[2])) + ")";
          case 'eq':
            return "(" + (emit(ast[1])) + " == " + (emit(ast[2])) + ")";
          case 'ne':
            return "(" + (emit(ast[1])) + " != " + (emit(ast[2])) + ")";
          case 'le':
            return "(" + (emit(ast[1])) + " <= " + (emit(ast[2])) + ")";
          case 'ge':
            return "(" + (emit(ast[1])) + " >= " + (emit(ast[2])) + ")";
          case 'lt':
            return "(" + (emit(ast[1])) + " < " + (emit(ast[2])) + ")";
          case 'gt':
            return "(" + (emit(ast[1])) + " > " + (emit(ast[2])) + ")";
          case 'in':
            return "_helpers['idxof'](" + (emit(ast[1])) + ", " + (emit(ast[2])) + ")";
          case 'like':
            return "_helpers['match'](" + (emit(ast[1])) + ", " + (emit(ast[2])) + ")";
          case 'match':
            new RegExp(ast[2]);
            return "_helpers['regex'](" + (emit(ast[1])) + ", " + (JSON.stringify(ast[2])) + ")";
          case 'nomatch':
            return emit(['not', ['match'].concat(ast.slice(1))]);
        }
    }
  };

  Zerkel = (function() {
    function Zerkel() {}

    Zerkel.MIN_GZIP_SIZE = Infinity;

    Zerkel.parse = function(query) {
      var ret;
      ret = emit(parser.parse(query));
      if (zlib && ret.length >= Zerkel.MIN_GZIP_SIZE) {
        ret = "GZ:" + (zlib.gzipSync(new Buffer(ret)).toString('base64'));
      }
      return ret;
    };

    return Zerkel;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.zerkelParser = Zerkel;
  } else {
    module.exports = Zerkel;
  }

}).call(this);
